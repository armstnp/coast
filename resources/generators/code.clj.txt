(ns routes.__table__
  (:require [coast]
            [components :refer :all]))


(defn assoc-__table__ [handler]
  (fn [request]
    (let [id (get-in request [:params :id])
          __table__ (coast/fetch :__table__ id)]
      (handler (assoc request :__table__ __table__)))))


(def routes
  (coast/routes
    [:get "/__table__" ::index]
    [:get "/__table__/build" ::build]
    [:post "/__table__" ::create]

    (coast/middleware assoc-__table__
      [:get "/__table__/:id" ::show]
      [:get "/__table__/:id/edit" ::edit]
      [:patch "/__table__/:id" ::patch]
      [:delete "/__table__/:id" ::delete])))


(def validate
  (coast/params :__table__
    [:required [__keywords__]]))


(def insert-cols
  (coast/columns :__table__ [__keywords__]))


(def patch-cols
  (coast/columns :__table__ [__keywords__]))


(defn index [request]
  (let [rows (coast/fetch :__table__)]
    (container
      (vstack {:spacing "m"}
        (link-to [::build] "New __table__")

        (when (not (empty? rows))
          (table
            (thead
              (tr
                __table-headers__))
            (tbody
              (for [row rows]
                (tr
                  __table-data__
                  (td
                    (link-to [::show row] "Show"))
                  (td
                    (link-to [::edit row] "Edit"))
                  (td
                    (button-to [::delete row] {:data-confirm "Are you sure?"} "Delete")))))))))))


(defn show [request]
  (let [__table__ (get request :__table__)]
    (container
      (vstack {:spacing "m"}
        (dl
          __data-elements__)
        (link-to [::index] "List")
        (link-to [::edit __table__] "Edit")
        (button-to [::delete __table__] {:data-confirm "Are you sure?"}
          "Delete")))))


(defn errors [m]
  [:div {:class "bg-red white pa2 mb4 br1"}
   [:h2 {:class "f4 f-subheadline"} "Errors Detected"]
   [:dl
    (for [[k v] m]
      [:div {:class "mb3"}
       (dt (str k))
       (dd v)])]])


(defn build [request]
  (container {:class "mw6"}
    (vstack {:spacing "m"}
      (when (some? (:errors request))
       (errors (:errors request)))

      (form-for [::create]
        __form-elements__

        (link-to [::index] "Cancel")
        (submit "New __table__")))))


(defn create [request]
  (let [params (get request :params)
        [_ errors] (->> (validate params)
                        (insert-cols)
                        (coast/insert)
                        (coast/rescue))]
    (if (nil? errors)
      (coast/redirect-to ::index)
      (build (merge request errors)))))


(defn edit [request]
  (let [__table__ (get request :__table__)]
    (container {:class "mw6"}
      (vstack {:spacing "m"}
        (when (some? (:errors request))
          (errors (:errors request)))

        (form-for [::patch __table__]
          __form-elements__

          (link-to [::index] "Cancel")
          (submit "Update __table__"))))))


(defn patch [request]
  (let [__table__ (get request :__table__)
        [_ errors] (->> (merge __table__ (:params request))
                        (validate)
                        (patch-cols)
                        (coast/update)
                        (coast/rescue))]
    (if (nil? errors)
      (coast/redirect-to ::index)
      (edit (assoc request :errors errors)))))


(defn delete [request]
  (let [__table__ (get request :__table__)
        deleted (coast/delete {:__table__ __table__})]
    (if (zero? deleted)
      (-> (coast/redirect-to ::index)
          (coast/flash "Something went wrong!"))
      (coast/redirect-to ::index))))
